#
# uncrustify config file for the linux kernel
#

# The type of line endings
newlines                                  = auto     # auto/lf/crlf/cr



indent_with_tabs	= 1		# 1=indent to level only, 2=indent with tabs
input_tab_size		= 4		# original tab size
output_tab_size		= 4		# new tab size
indent_columns		= output_tab_size

indent_label		= 1		# pos: absolute col, neg: relative column

# Whether to indent strings broken by '\' so that they line up
indent_align_string                       = False # false/true

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
indent_func_call_param                    = True # false/true
#
# inter-symbol newlines
#

# Same as indent_func_call_param, but for function defs
indent_func_def_param                     = True    # false/true

# Same as indent_func_call_param, but for function protos
indent_func_proto_param                   = True # false/true

# Same as indent_func_call_param, but for class declarations
indent_func_class_param                   = True    # false/true

# Same as indent_func_call_param, but for class variable constructors
indent_func_ctor_var_param                = True # false/true

# Same as indent_func_call_param, but for templates
indent_template_param                     = True # false/true

indent_align_assign                       = True # false/true

nl_enum_brace		= remove	# "enum {" vs "enum \n {"
nl_union_brace		= remove	# "union {" vs "union \n {"
nl_struct_brace		= remove	# "struct {" vs "struct \n {"
nl_do_brace 		= remove	# "do {" vs "do \n {"
nl_if_brace 		= remove	# "if () {" vs "if () \n {"
nl_for_brace 		= remove	# "for () {" vs "for () \n {"
nl_else_brace 		= remove# "else {" vs "else \n {"
nl_while_brace 		= remove	# "while () {" vs "while () \n {"
nl_switch_brace 	= remove# "switch () {" vs "switch () \n {"
nl_brace_while		= remove	# "} while" vs "} \n while" - cuddle while
nl_brace_else		= remove	# "} else" vs "} \n else" - cuddle else
nl_func_var_def_blk	= 1
nl_fcall_brace		= remove	# "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace		= force		# "int foo() {" vs "int foo()\n{"
nl_after_return		= True
nl_before_case	= True


# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                             = force  # ignore/add/remove/force


#
# Source code modifications
#

mod_paren_on_return	= ignore	# "return 1;" vs "return (1);"
mod_full_brace_if	= force	# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for	= force	# "for () a--;" vs "for () { a--; }"
mod_full_brace_do	= force	# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while	= force	# "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_nl	= 3		# don't remove if more than 3 newlines


#
# inter-character spacing options
#

sp_return_paren	= remove		# "return (1);" vs "return(1);"
sp_sizeof_paren		= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen	= force		# "if (" vs "if("
sp_after_sparen		= force		# "if () {" vs "if (){"
sp_after_cast		= remove	# "(int) a" vs "(int)a"
sp_inside_braces	= remove	# "{ 1 }" vs "{1}"
sp_inside_braces_struct	= remove		# "{ 1 }" vs "{1}"
sp_inside_braces_enum	= remove		# "{ 1 }" vs "{1}"
sp_assign		= force
sp_arith		= force
sp_bool			= force
sp_compare		= force
sp_assign		= force
sp_after_comma		= force
sp_func_def_paren	= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren	= remove	# "foo (" vs "foo("
sp_func_proto_paren	= remove	# "int foo ();" vs "int foo();"



#
# Aligning stuff
#

align_with_tabs		= True	# use tabs to align
align_on_tabstop	= True		# align on tabstops
align_keep_tabs		= true
align_enum_equ_span		= 0		# '=' in enum definition
align_nl_cont		= True
# align_var_def_span	= 2
# align_var_def_inline	= TRUE
# align_var_def_star	= FALSE
# align_var_def_colon	= TRUE
align_assign_span	= 0
align_struct_init_span	= 0		# align stuff in a structure init '= { }'
#align_right_cmt_span	= 3
#align_pp_define_span	= 8;
# align_pp_define_gap	= 4;

cmt_star_cont		= False

indent_brace		= 0

# The position of the comma in wrapped expressions
pos_comma                                 = lead # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of the comma in the class base list
pos_class_comma                           = trail # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force
indent_bool_paren  = false

indent_align_assign   = false  



